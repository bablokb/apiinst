#!/bin/bash
#
# Write an (Raspberry Pi) image of a sd-card to a physical sd-card and
# copy files from template directories to the sd-card.
#
# The program supports raw image files and images compressed with gz or zip.
# If your internet-connection is stable and you see no need to store
# the image locally, you can also use a http-url as a source.
# 
# TODO:
# 
# Test cases:
#   - direct http download
#   + simple dd:                    apiinst -i img -t /dev/sdb -n
#   + expand root:                  apiinst -i img -t /dev/sdb
#   + create home (512M):           apiinst -i img -t /dev/sdb -H 512M
#   + create home (512M, no exp):   apiinst -i img -t /dev/sdb -H 512M -n
#   + create home (rest):           apiinst -i img -t /dev/sdb -H rest
#   + create swap (512M):           apiinst -i img -t /dev/sdb -S 512M
#   + create swap (512M, no exp):   apiinst -i img -t /dev/sdb -S 512M -n
#   + create swap (rest):           apiinst -i img -t /dev/sdb -S rest
#   + create home (rest) and swap:  apiinst -i img -t /dev/sdb -H rest -S 512M
#   + create home and swap (rest):  apiinst -i img -t /dev/sdb -H 512M -S rest
#   + create home and swap:         apiinst -i img -t /dev/sdb -H 512M -S 512M
#   + create home and swap (no ex): apiinst -i img -t /dev/sdb -H 512M -S 512M -n
# 
# $Author: bablokb $
# $Revision: 1.5 $
#
# License: GPL3
# -----------------------------------------------------------------------------

# some constants   ------------------------------------------------------------

MNT_DATA="data"                             # directory within /
FS_TYPE="ext4"                              # filesystem type for home, data
LOG_OVERHEAD=2048                           # overhead logical partitions

# check program prerequisites   -----------------------------------------------

checkPrereqs() {
  local p pgms="fdisk funzip gunzip bunzip2 dd partprobe losetup kpartx bc sfdisk resize2fs rsync"
  local optPgms="wget realpath"

  # check uid = 0
  if [ "$UID" != "0" ]; then
    echo "error: you need to be root to run this script!" >&2
    exit 3
  fi

  # check mandatory programs
  for p in $pgms; do
    if ! type -p $p > /dev/null; then
      echo "error: you need to install program $p to run this script!" >&2
      exit 3
    fi
  done

  # check optional programs
  for p in $optPgms; do
    if ! type -p $p > /dev/null; then
      echo "info: recommended program $p not installed!" >&2
    fi
  done
}

# usage message   -------------------------------------------------------------

usage() {
  local pgm=`basename $0`
  echo -e "\n$pgm: Write an (Raspberry Pi) image of a sd-card to a physical sd-card\n`tr '[:alnum:]' ' ' <<< \"$pgm\"`  and copy additional files from all given directories to the sd-card\n\
  \nusage: `basename $0` -i image -t target [options] [dir [...]]\n\
  Possible options:\n\
    -i image          source image (required)\n\
    -t target[=name]  target device (required, e.g. /dev/sdc or /dev/sdc1)\n\
                      (name defaults to /dev/mmcblk0p)\n\
    -B boot           boot device (optional, target device is USB-HDD/SSD)\n\n\
    -P                preparation mode\n\n\
    -H size           create a home-partition of given size (default: no home)\n\
                      (use size>0 or 'rest')\n\
    -D size           create a data-partition of given size (default: no data)\n\
                      (use size>0 or 'rest')\n\
    -S size           create a swap-partition of given size (default: no swap)\n\
                      (use size>0 or 'rest')\n\
    -Y s              create additional system-partition of given size\n\
                      (default: no additional system-partition)\n\n\
    -n                don't expand root partition\n\
                      (note that '-H rest' or '-S rest' will also prevent expansion)\n\n\
    -k                 keep all files\n\n\
    -Q                 prepare image for Qemu (needs image-file as target)\n\
    -L logfile         write log-messages additionally to given logfile\n\
    -1 script          run the given script after  copying the image to SD\n\
    -2 script          run the given script after  resizing/partition creation\n\
    -3 script          run the given script after  copying template files to the SD\n\
    -h                 show this help\n\
"
  exit 3
}

# set defaults   --------------------------------------------------------------

setDefaults() {
  declare -g -a newPartsType newPartsSize
  nrHome=""
  nrData=""
  nrSwap=""
  newPartsNr=1
  prepMode=0
  delPartitionCmd="d\n2\n"
  expand=1
  keepFiles=0
  sourceImage=""
  targetDevice=""
  bootDevice=""
  phase1Script=""
  phase2Script=""
  phase3Script=""
  logFile="/dev/null"
  qemuMode=0
}

# parse arguments and set variables -------------------------------------------

parseArguments() {
  while getopts ":i:t:B:L:H:D:S:Y:nkQP1:2:3:vhd" opt; do
    case $opt in
      i) sourceImage="$OPTARG";;
      t) targetDevice="$OPTARG";;
      B) bootDevice="$OPTARG";;
      L) logFile="$OPTARG"; rm -f "$logFile";;
      H) addPart "H" "$OPTARG";;
      D) addPart "D" "$OPTARG";;
      S) addPart "S" "$OPTARG";;
      Y) addPart "Y" "$OPTARG";;
      n) expand=0;;
      k) keepFiles=1;;
      Q) qemuMode=1;;
      P) prepMode=1;;
      1) phase1Script="$OPTARG";;
      2) phase2Script="$OPTARG";;
      3) phase3Script="$OPTARG";;
      h) usage;;
      ?) echo "error: illegal option: $OPTARG"
           usage;;
    esac
  done

  shift $((OPTIND-1))
  dirs=("$@")
  let newPartsCount=newPartsNr-1
}

# save partition-info for later processing   ----------------------------------

addPart() {
  newPartsType[$newPartsNr]="$1"
  newPartsSize[$newPartsNr]=$(convertSize "$2")
  msg "info: add partition $newPartsNr (type: $1, size: ${newPartsSize[$newPartsNr]})"
  let newPartsNr+=1
}

# write message to log and stderr   -------------------------------------------

msg() {
  echo -e "$1"
}

# check arguments   -----------------------------------------------------------

checkArguments() {
  # check source images
  if [ -z "$sourceImage" ]; then
    msg "error: source image not specified. Use -i option!" 
    usage
  fi
  if [ ! -f "$sourceImage" ]; then
    msg "error: source image $sourceImage does not exist!" 
    exit 3
  fi

  # check target device
  if [ -z "$targetDevice" ]; then
    msg "error: target device not specified. Use -t option!" 
    usage
  fi

  # targetDevName is the name of the target after installation
  # (we might install to /dev/sdb3, but in the running system it will
  # be /dev/mmcblk0p3 or /dev/sda3)
  # Syntax is -t target[=name], e.g. -t /dev/sdb=/dev/sda
  # name defaults to /dev/mmcblk0p[nr]

  targetDevName="${targetDevice#*=}"
  targetDevice="${targetDevice%=*}"
  [ "$targetDevName" = "$targetDevice" ] && \
          targetDevName=$(sed -e "s/sd./mmcblk0p/" <<< "$targetDevice")

  if [ -b "$targetDevice" ]; then
    if grep -wq "$targetDevice." /etc/mtab; then
      msg "error: partition from device $targetDevice is already mounted!" 
      exit 3
    fi
    # check if targetDevice is a partition and not a whole block-device
    if lsblk -n -d -o NAME | grep -q "${targetDevice/\/dev\/}"; then
      targetType="block"
    else
      targetType="partition"
    fi
  elif [ "${targetDevice:0:4}" = "/dev" ]; then
    msg "error: device $targetDevice does not exist!"
    exit 3
  else
    targetType="image"
    targetDeviceFile="$targetDevice"
    msg "warning: assuming $targetDevice is an image-file"
  fi
  msg "info: target-type is: $targetType"

  # check boot device
  if [ -n "$bootDevice" ]; then
    if [ "$targetType" != "block" ]; then
      msg "error: dedicated boot device only supported if target is a block-device!"
      usage
    fi
    if [ ! -b "$bootDevice" ]; then
      msg "error: device $bootDevice does not exist!" 
      exit 3
    fi
    if grep -wq "$bootDevice." /etc/mtab; then
      msg "error: partition from device $bootDevice is already mounted!" 
      exit 3
    fi
  fi

  # check invalid options for target-type "partition"
  if [ "$targetType" = "partition" ]; then
    if [ $newPartsCount -gt 0 ]; then
      msg "error: options -H/-D/-S/-Y not supported if target is a partition!"
      exit 3
    fi
  fi

  # check size parameters
  for index in "${!newPartsSize[@]}"; do
    size="${newPartsSize[$index]}"
    if [ "$size" = "rest" -a $index -ne $newPartsCount ]; then
      msg "error: only the last partition can take up the rest of the free space!"
      exit 3
    fi
  done

  # check qemu-mode
  if [ $qemuMode -eq 1 -a "$targetType" != "image" ]; then
    msg "error: Qemu-mode only available for targets of type image!"
    exit 3
  fi
}

# setup loop device for targetType == image   ----------------------------------

setupLoop() {
  if [ "$1" = "init" ]; then
    msg "info: loading kernel-module loop"
    if ! modprobe loop; then
      msg "error: could not load kernel-module loop"
      exit 3
    fi
    if [ -f "$targetDevice" ]; then   # existing file, need this for writeSD
      msg "info: setting up loop device (init)"
      losetup -f "$targetDevice"
      targetDevice=`losetup -j "$targetDevice" | cut -d: -f1`
      msg "info: loop device is: $targetDevice"
    fi

  elif [ "$1" = "add" ]; then
    msg "info: setting up partitions for loop-device $targetDevice"
    [ ! -f "$targetDevice" ] && losetup -d "$targetDevice" # remove old loop

    # map partitions (make naming consistent with normal block devices)
    kpartx -va -p '' -s "$targetDeviceFile"
    targetDevice=`losetup -j "$targetDeviceFile" | cut -d: -f1`
    if [ -z "$targetDevice" ]; then
      msg "error: could not setup loop-devices for $targetDeviceFile!"
      exit 3
    fi
    ln -s "$targetDevice" "/dev/mapper/${targetDevice##*/}"
    targetDevice="/dev/mapper/${targetDevice##*/}"
    msg "info: loop device is: $targetDevice"

  elif [ "$1" = "upd" ]; then
    msg "info: updating partitions for loop-device $targetDevice"
    kpartx -vu -p '' -s "$targetDeviceFile"

  elif [ "$1" = "cleanup" ]; then
    msg "info: deleting loop-device $targetDevice"
    kpartx -dv -p '' -s "$targetDeviceFile"
    rm -f "$targetDevice"              # symlink in /dev/mapper created with add
  fi
}

# copy to partition   ----------------------------------------------------------

copy2part() {
  local srcImage="$1" srcDevice srcMount destMount

  msg "info: loading kernel-module loop"
  if ! modprobe loop; then
    msg "error: could not load kernel-module loop"
    exit 3
  fi

  # mount source
  msg "info: mounting partitions of $srcImage"
  srcDevice=`losetup --show -f -P "$srcImage"`
  msg "info: srcDevice: $srcDevice"
  srcMount=`mktemp -d --tmpdir apiinst.XXXXXX`
  msg "info: mounting ${srcDevice}p2 to $srcMount"
  mount "${srcDevice}p2" "$srcMount"
  mkdir -p "$srcMount/boot"
  msg "info: mounting ${srcDevice}p1 to $srcMount/boot"
  mount "${srcDevice}p1" "$srcMount/boot"

  # mount target-partition
  destMount=`mktemp -d --tmpdir apiinst.XXXXXX`
  msg "info: mounting target-partition $targetDevice to $destMount"
  mount "$targetDevice" "$destMount"

  # copy files
  msg "info: copying files from $srcImage to $targetDevice"
  rsync -axHAXS --delete "$srcMount/" "$destMount"
  rsync -axHAXS --delete "$srcMount/boot/" "$destMount/boot"
  sync

  # cleanup
  msg "info: cleanup of mounts"
  umount "$destMount" && rm -fr "$destMount"
  umount "$srcMount/boot"
  umount "$srcMount" && rm -fr "$srcMount"
  losetup -D "$srcDevice"
}

# now copy image to target-device   --------------------------------------------

writeSD() {
  local pgm="cat"

  [ "$targetType" = "image" ] && setupLoop "init"

  # check for direct download
  if [ "${sourceImage#http}" != "$sourceImage" ] && type -p wget >/dev/null; then
    msg "info: using wget for downloading the image"
    pgm="wget -q -O -"
  fi  

  # we support various compression formats
  declare -A unpacker
  unpacker["zip"]="funzip"
  unpacker["gz"]="gunzip -c"
  unpacker["bz2"]="bunzip2 -c"
  unpacker["xz"]="xzcat"

  # select unpacker
  local ext="${sourceImage##*.}"
  local upcmd="${unpacker[$ext]}"

  if [ -n "$upcmd" ]; then
    if [ "$targetType" = "partition" ]; then
      # check free space for temporary unzip of image
      # we assume that the compressed images is not less than 1/6 of the source
      local temp_dir="${TMPDIR:-/tmp}"
      local fs_free=$(($(stat -f -c '%f*%S/1024' $temp_dir)))
      local imgSize=$(($(stat -c"6*%s/1024" "$sourceImage")))
      if [ $fs_free -lt $imgSize ]; then
        msg "error: not enough temporary space available, try setting TMPDIR!"
        exit 3
      fi

      tmpSourceImage=`mktemp  --tmpdir apiinst.XXXXXX`
      msg "info: unpacking $sourceImage to $tmpSourceImage with $upcmd"
      eval "$pgm" "$sourceImage" | eval "$upcmd" > "$tmpSourceImage"
      copy2part "$tmpSourceImage"
      rm -f "$tmpSourceImage"
    else
      msg "info: unpacking $sourceImage to $targetDevice with $upcmd"
      eval "$pgm" "$sourceImage" | eval "$upcmd" > "$targetDevice"
    fi
  else
    if [ "$targetType" = "partition" ]; then
      copy2part "$sourceImage"
    else
      msg "info: dd-ing $sourceImage to $targetDevice"
      eval "$pgm" "$sourceImage" | dd of="$targetDevice" bs=1M
    fi
  fi
  sync
  # update kernel partition table
  if [ "$targetType" = "block" ]; then
    partprobe
  elif [ "$targetType" = "image" ]; then
    setupLoop "add"
  fi
}

# convert sizes to sectors   --------------------------------------------------

convertSize() {
  local size="$1"

  # handle special values
  if [ "$size" = "rest" -o "$size" = "0" ]; then
    echo "$size"
    return
  fi

  size="${size^^}"                                  # convert to upper-case
  if [ "${size/G}" != "$size" ]; then
    size=$(bc <<< "${size/G}*2097152/1")            # GB to sectors
  elif [ "${size/M}" != "$size" ]; then
    size=$(bc <<< "${size/M}*2048/1")               # MB to sectors
  elif [ "${size/K}" != "$size" ]; then
    size=$(bc <<< "${size/K}*2/1")                  # KB to sectors
  fi
  let size=size/2048*2048                           # align
  echo "$size"
}

# calculate partition sizes   -------------------------------------------------

calcSizes() {
  # sizes are in sectors
  local d1 d2

  # device size and current root-size
  let sizeDev=$(sfdisk -s "$targetDevice")*2
  msg "info: sizeDev:   $sizeDev"
  let sizeRoot=$(sfdisk -s "$targetDevice"2)*2
  msg "info: sizeRoot:   $sizeRoot"
  
  # sizeUsed: up to last sector of second partition
  read d1 startRoot sizeUsed d2 < <(fdisk -l "$targetDevice" | tail -n 1)
  let sizeUsed+=1
  let sizeFree=sizeDev-sizeUsed

  msg "info: startRoot:  $startRoot"
  msg "info: sizeUsed:   $sizeUsed"
  msg "info: sizeFree:   $sizeFree"

  # total size requested (without "rest")
  local size sizeNeeded=0 haveRest=0
  for index in "${!newPartsSize[@]}"; do
    size="${newPartsSize[$index]}"
    if [ "$size" != "rest" ]; then
      if [ $index -gt 1 -a $newPartsCount -gt 2 ]; then
        let size+=$LOG_OVERHEAD
      fi
      let sizeNeeded+=$size
    else
      haveRest=1
    fi
    msg "info: size${newPartsType[$index]}:      ${newPartsSize[$index]}"
  done

  msg "info: sizeNeeded: $sizeNeeded"
  if [ $sizeFree -lt $sizeNeeded ]; then
    msg "error: not enough free space on device!" 
    exit 3
  fi

  # calculate additional size for root (aligned to 2048-byte boundary)
  let addRoot=0
  if [ $expand -eq 1 -a $haveRest -eq 0 ]; then
    let addRoot=\(sizeFree-sizeNeeded\)/2048*2048
  fi
  msg "info: addRoot:    $addRoot"

  # begin of free space
  let startFree=sizeUsed
  msg "info: startFree:  $startFree"
}

# resize root filesystem of SD-card   -----------------------------------------

resizeRoot() {
  local change="+" newSize

  [ $addRoot -eq 0 ] && return

  [ $addRoot -lt 0 ] && change="-"
  let newSize=sizeRoot+addRoot-1
  msg "info: resizing root to $newSize"

  let startFree+=addRoot

  # check existing fs
  msg "info: checking existing root-fs"
  e2fsck -fy  "${targetDevice}2"
  if [ "$?" -gt 2 ]; then
    msg "error: filesystem check failed. Aborting..." 
    exit 3
  fi

  if [ "$change" == "-" ]; then
    msg "info: shrinking existing root-fs"
    resize2fs "${targetDevice}2" "$newSize"
  fi

  msg "info: delete and recreate root partition with new size $newSize"

  # resize partition
  #        /- delete
  #        |  /- partition nr. 2
  #        |  |  /- new partition
  #        |  |  |  /- primary partition
  #        |  |  |  |  /- partition nr. 2
  #        |  |  |  |  |  /- first sector
  #        |  |  |  |  |  |             /- new size or last sector or empty
  #        |  |  |  |  |  |             |            /- write table
  #        v  v  v  v  v  v             v            v
  echo -e "d\n2\nn\np\n2\n${startRoot}\n+${newSize}\nw\n" | fdisk "$targetDevice"

  msg "info: sleeping 3 second before rereading partition-table"
  sleep 3
  partprobe -s "$targetDevice"

  local i=0
  while [ ! -b "${targetDevice}2" -a $i -lt 3 ]; do
    msg "info: sleeping 3 second before rereading partition-table"
    sleep 3
    partprobe -s "$targetDevice"
    let i+=1
  done
  if [ $i -eq 3 ]; then
    msg "error: failed to resize partition 2"
    exit 3
  fi
  sleep 3
  if [ "$targetType" != "block" ]; then
    setupLoop "upd"
  fi

  if [ "$change" == "+" ]; then
    # expand filesystem to size of partition
    msg "info: expanding filesystem to new size"
    resize2fs "${targetDevice}2"
  fi
}

# create all partitions   -----------------------------------------------------

createPartitions() {
  local index size type nr offset=2
  for index in "${!newPartsSize[@]}"; do
    size="${newPartsSize[$index]}"
    type="${newPartsType[$index]}"
    let nr=index+offset

    # add extended partition if we need more than two additional partitions
    if [ $newPartsCount -gt 2 -a $nr -eq 4 ]; then
      msg "info: creating partition 4 (size: rest, type: E)"
      createPartition 4 "rest" E
      let nr+=1
      let offset+=1
    fi

    # create partition of given type
    msg "info: creating partition $nr (size: $size, type: $type)"
    createPartition $nr $size $type

    if [ "$type" != "S" ]; then
      msg "info: formatting partition $nr with $FS_TYPE"
      mkfs.$FS_TYPE -E "lazy_itable_init=0,lazy_journal_init=0" \
                                                "${targetDevice}$nr"
      if [ "$type" = "H" ]; then
        e2label "${targetDevice}$nr" "HOME"
        nrHome="$nr"
      elif [ "$type" = "D" ]; then
        e2label "${targetDevice}$nr" "DATA"
        nrData="$nr"
      elif [ "$type" = "Y" ]; then
        e2label "${targetDevice}$nr" "SYSTEM p$nr"
      fi
    else
      msg "info: initializing swap-device ${targetDevice}$nr"
      mkswap "${targetDevice}$nr"
      nrSwap="$nr"
    fi
  done
}

# create new partition on SD-card   ------------------------------------------

createPartition() {
  local partNr="$1" partSize="$2" partType="$3" pNr pSize pType pStart

  # partition nr
  if [ $partNr -le 3 ]; then
    pNr="$partNr\n"
  else
    pNr=""
  fi

  # partitition size
  if [ "$partSize" = "rest" -o "$partType" = "E" ]; then
    pSize=""
  else
    let pSize=partSize-1    # fdisk uses zero based values and
    pSize="+$pSize"         # pSize is the relative position
  fi

  # partition type
  if [ "$partType" = "E" ]; then
    pType="e\n"
  elif [ $partNr -le 4 ]; then
    pType="p\n"
  else
    pType=""
  fi

  # first sector (use default for logical partitions)
  if [ $partNr -le 4 ]; then
    pStart="$startFree"
  else
    pStart=""
  fi

  # filesystem type
  if [ "$partType" = "E" ]; then
    pHex=""
  elif [ "$partType" = "S" ]; then
    pHex="t\n${partNr}\n82\n"
  else
    pHex="t\n${partNr}\n83\n"
  fi

  # keep track of partition in case we have to delete the entry
  # from the boot device
  [ $partNr -le 4 ] && delPartitionCmd+="d\n${partNr}\n"

  msg "info: creating partition $partNr with size $partSize (type: ${pType:-L})"

  # create partition
  #         /- new
  #         |  /- partition type
  #         |  |       /- partition nr. pNr
  #         |  |       |     /- first sector
  #         |  |       |     |          /- end sector (relative)
  #         |  |       |     |          |         /- hex-type
  #         |  |       |     |          |         |      /- write table
  #         |  |       |     |          |         |      |  /- print table
  #         |  |       |     |          |         |      |  |
  #         v  v       v     v          v         v      v  v
  fdiskcmd="n\n${pType}${pNr}${pStart}\n${pSize}\n${pHex}w\np\n"

  msg "info: fdisk-command: $fdiskcmd"
  echo -e "$fdiskcmd" | fdisk "$targetDevice"

  msg "info: sleeping 3 second before rereading partition-table"
  sleep 3
  partprobe -s "$targetDevice"

  local i=0
  while [ ! -b "${targetDevice}$partNr" -a $i -lt 3 ]; do
    msg "info: sleeping 3 second before rereading partition-table"
    sleep 3
    partprobe -s "$targetDevice"
    let i+=1
  done
  if [ $i -eq 3 ]; then
    msg "error: failed to create partition $partNr"
    exit 3
  fi
  sleep 3
  if [ "$targetType" != "block" ]; then
    setupLoop "upd"
  fi

  # update startFree
  if [ $partNr -le 3 ]; then
    let startFree+=partSize
    msg "info: startFree: $startFree"
  fi
}

# move files from /home to new partition   ------------------------------------

moveHome() {
  # check for home-partition
  [ -z "$nrHome" ] && return

  local mntDirRoot=`mktemp -d --tmpdir apiinst.XXXXXX`
  local mntDirHome=`mktemp -d --tmpdir apiinst.XXXXXX`

  # mount partitions
  msg "info: mounting ${targetDevice}2 (root-partition)" 
  mount "${targetDevice}2" "$mntDirRoot"
  msg "info: mounting ${targetDevice}$nrHome (home-partition)" 
  mount "${targetDevice}$nrHome" "$mntDirHome"

  # move files
  msg "info: moving files from /home to new home-partition"
  mv -f "$mntDirRoot/home/"* "$mntDirHome"       # we assume no dot-files
  sync

  # umount partitions
  umount "$mntDirHome" && rm -fr "$mntDirHome"
  umount "$mntDirRoot" && rm -fr "$mntDirRoot"
}

# mount system from SD   ------------------------------------------------------

mountPartitions() {
  mntDir=`mktemp -d --tmpdir apiinst.XXXXXX`

  # handle target-type "partition"
  if [ "$targetType" = "partition" ]; then
    msg "info: mounting ${targetDevice} (root-partition)"
    mount "${targetDevice}" "$mntDir"
    return
  fi

  # mount partitions
  msg "info: mounting ${targetDevice}2 (root-partition)" 
  mount "${targetDevice}2" "$mntDir"

  [ ! -d "$mntDir/boot" ] && mkdir -p "$mntDir/boot"
  msg "info: mounting ${targetDevice}1 to boot" 
  mount "${targetDevice}1" "$mntDir/boot"

  if [ -n "$nrHome" ]; then
    msg "info: mounting ${targetDevice}$nrHome (home-partition)" 
    mount "${targetDevice}$nrHome" "$mntDir/home"
  fi

  if [ -n "$nrData" ]; then
    msg "info: mounting ${targetDevice}$nrData (data-partition)"
    mkdir -p "$mntDir/$MNT_DATA"
    mount "${targetDevice}$nrData" "$mntDir/$MNT_DATA"
  fi
}

# copy files from template directories   ---------------------------------------

copyFiles() {
  local d haveCerts=0 doCleanup=0
  for d in "${dirs[@]}"; do
    type -p realpath > /dev/null && d=`realpath "$d"`
    if [ ! -d "$d" ]; then
      msg "warning: $d is not a directory!" 
      continue
    fi

    # cleanup necessary only if actually copy files
    [ $keepFiles -eq 0 ] && doCleanup=1

    msg "info: copying $d to $mntDir"
    rsync -aAXHv "$d/" "$mntDir"

    # check if have certificates
    if [ $keepFiles -eq 0 -a $haveCerts -eq 0 ]; then
      find "$d/etc/ssh"  | grep -q "ssh_host_.*key" && haveCerts=1 
    fi
  done  
  sync

  # check if we should do some cleanup
  [ $doCleanup -eq 1 ] && cleanupFiles "$haveCerts"
}

# remove or change files   ----------------------------------------------------

cleanupFiles() {
  local haveCerts="$1"

  msg "info: removing /etc/profile.d/raspi-config.sh"
  rm -f "$mntDir/etc/profile.d/raspi-config.sh"       # assume we don't need it

  if [ "$haveCerts" = "1" ]; then
    msg "info: removing regenerate_ssh_host_keys"
    find "$mntDir/etc" -name "*regenerate_ssh_host_keys" -exec rm -f {} \;
  fi
}

# update files (/etc/fstab, /etc/rc.local)   ----------------------------------

updateFiles() {
  # add home and/or swap partition to /etc/fstab
  # Note targetDevName is a block-device name here
  if [ -n "$nrHome" ]; then
      echo -e "\n#\n${targetDevName}$nrHome  /home auto noatime,acl,user_xattr 1 2" >> \
                                                             "$mntDir/etc/fstab"
  fi
  if [ -n "$nrData" ]; then
      echo -e "\n#\n${targetDevName}$nrData  /$MNT_DATA auto noatime,acl,user_xattr 1 2" >> \
                                                             "$mntDir/etc/fstab"
  fi
  if [ -n "$nrSwap" ]; then
      echo -e "\n#\n${targetDevName}$nrSwap  swap swap defaults 0 0" >> \
                                                             "$mntDir/etc/fstab"
  fi

  # add one-time boot-script apiinst2 to /etc/rc.local
  if [ -f "$mntDir/usr/local/sbin/apiinst2" ]; then
    sed -i -e '/^exit 0/i\
[ -x /usr/local/sbin/apiinst2 ] && /usr/local/sbin/apiinst2 &' \
                                                           "$mntDir/etc/rc.local"
  fi

  msg "info: fixing $mntDir/etc/fstab"
  if [ "$targetType" = "block" ]; then
    # Note targetDevName is a partition-device name here
    sed -i  -e "/\W\/boot\W/s,^[^ \t]*,${targetDevName}1," "$mntDir/etc/fstab"
    sed -i  -e "/\W\/\W/s,^[^ \t]*,${targetDevName}2," "$mntDir/etc/fstab"
    msg "info: fixing $mntDir/boot/cmdline.txt"
    sed -i -e "s,root=[^ ]*,root=${targetDevName}2," "$mntDir/boot/cmdline.txt"
  elif [ "$targetType" = "partition" ]; then
    # Note targetDevName is a partition-device name here
    if [ "${targetDevName:0:13}" = "/dev/mmcblk0p" ]; then
      sed -i  -e "/\W\/boot\W/s,^[^ \t]*,/dev/mmcblk0p1," "$mntDir/etc/fstab"
    else
      sed -i  -e "/\W\/boot\W/s,^[^ \t]*,${targetDevName%%[0-9]*}1," "$mntDir/etc/fstab"
    fi
    sed -i  -e "/\W\/\W/s,^[^ \t]*,${targetDevName}," "$mntDir/etc/fstab"
    msg "info: fixing $mntDir/boot/cmdline.txt"
    sed -i -e "s,root=[^ ]*,root=${targetDevName}," "$mntDir/boot/cmdline.txt"
  fi
}

# umount system from SD   -----------------------------------------------------

umountPartitions() {
  if [ "$targetType" != "partition" ]; then
    if [ -n "$nrHome" ]; then
      msg "info: unmounting ${targetDevice}$nrHome"
      umount "$mntDir/home"
    fi
    if [ -n "$nrData" ]; then
      msg "info: unmounting ${targetDevice}$nrData"
      umount "$mntDir/$MNT_DATA"
    fi
    msg "info: unmounting ${targetDevice}1"
    umount "$mntDir/boot"
    msg "info: unmounting ${targetDevice}2"
  else
    msg "info: unmounting ${targetDevice}"
  fi
  umount "$mntDir" && rm -fr "$mntDir"
}

# adjust fake HW-clock for preparation-mode   --------------------------------

adjustClock() {
  msg "info: adjusting fake HW-clock by one day"
  local mntDir=`mktemp -d --tmpdir apiinst.XXXXXX`
  
  # mount root partition
  msg "info: mounting ${targetDevice}2 (root-partition)" 
  mount "${targetDevice}2" "$mntDir"

  # read value, and write an adjusted value
  local oldClock=$(cat $mntDir/etc/fake-hwclock.data)
  msg "info: old HW-clock value: $oldClock"
  date -d "$oldClock +1 day" +"%Y-%m-%d %T" > "$mntDir/etc/fake-hwclock.data"
  msg "info: new HW-clock value: $(cat $mntDir/etc/fake-hwclock.data)"

  # unmount root partition
  msg "info: unmounting ${targetDevice}2"
  umount "$mntDir" && rm -fr "$mntDir"
}

# copy boot partition to boot-device   ---------------------------------------

copyBootPartition() {
  msg "info: copying first partition to boot-device"
  dd if="$targetDevice" of="$bootDevice" bs=512 count=$startRoot
  sync
  sleep 1
  partprobe
  sleep 3

  # delete additional partitions: since we copied the partition table, these
  # (non-existent) partition table entries are invalid
  msg "info: deleting invalid partitions from boot-device"

  # delete partition
  #                          /- write table
  #                          |
  #                          v
  echo -e "${delPartitionCmd}w\n" | fdisk "$bootDevice"
  msg "info: sleeping 3 second before rereading partition-table"
  sleep 3
  partprobe
}

# fix various references to root-partition in files   ------------------------

fixupPartitions() {
  local mntDir=`mktemp -d --tmpdir apiinst.XXXXXX`

  msg "info: fixing /boot/cmdline.txt on boot-device"
  mount "${bootDevice}1" "$mntDir"
  sed -i -e 's!root=[^ ]*!root=/dev/sda2!' "$mntDir/cmdline.txt"
  sync
  umount "$mntDir"

  msg "info: fixing /etc/fstab on root-device"
  mount "${targetDevice}2" "$mntDir"
  sed -i -e '/home/s/mmcblk0p/sda/' \
         -e "/$MNT_DATA/s/mmcblk0p/sda/" \
         -e '/swap/s/mmcblk0p/sda/' \
         -e '/\W\/\W/s!^[^ \t]*!/dev/sda2!' "$mntDir/etc/fstab"
  umount "$mntDir" && rm -fr "$mntDir"
}

# apply fixes for Qemu   -----------------------------------------------------

fix4Qemu() {
  local mntDir=`mktemp -d --tmpdir apiinst.XXXXXX`

  mount "${targetDevice}2" "$mntDir"
  mount "${targetDevice}1" "$mntDir/boot"

  msg "info: fixing /boot/cmdline.txt"
  sed -i -e 's!root=[^ ]*!root=/dev/sda2!' "$mntDir/boot/cmdline.txt"

  # fix /etc/fstab: replace device ...
  msg "info: fixing /etc/fstab on root-device"
  sed -i -e '/home/s/mmcblk0p/sda/' \
         -e "/$MNT_DATA/s/mmcblk0p/sda/" \
         -e '/swap/s/mmcblk0p/sda/' \
         -e '/\W\/\W/s!^[^ \t]*!/dev/sda2!' "$mntDir/etc/fstab"

  #  ... and prevent checking of boot
  # this is a workaround because CONFIG_FHANDLE is missing?
  #http://forums.debian.net/viewtopic.php?f=10&t=118828
  sed -i -e '/boot/s/defaults/defaults,noauto/' "$mntDir/etc/fstab"

  # remove ld.so.preload
  msg "info: removing /etc/ld.so.preload on root-device"
  : > "$mntDir/etc/ld.so.preload"

  sync
  umount "$mntDir/boot" && umount "$mntDir" && rm -fr "$mntDir"
}

# wrapper (for easy logging)   -----------------------------------------------

main() {
  checkArguments

  # write the image to SD
  writeSD
  if [ $prepMode -eq 1 ]; then
    msg "info: preparing image for initial configuration"
    adjustClock
    [ "$targetType" = "image" ] && setupLoop "cleanup"
    msg "info: finished"
    exit 0
  fi

  # calculate partition sizes (bail out if necessary)
  [ "$targetType" != "partition" ] && calcSizes

  if [ -n "$phase1Script" ]; then
     msg "info: running $phase1Script"
     eval "$phase1Script"
  fi

  if [ "$targetType" != "partition" ]; then
    resizeRoot
    createPartitions
    moveHome           # move files from /home to new partition if necessary
  fi

  if [ -n "$phase2Script" ]; then
     msg "info: running $phase2Script"
     eval "$phase2Script"
  fi

  # copy template-files
  mountPartitions
  copyFiles
  updateFiles

  if [ -n "$phase3Script" ]; then
     msg "info: running $phase3Script"
     eval "$phase3Script" "$mntDir"
  fi

  # move boot-files to backup-directory (needed for pi-boot-switch)
  if [ "$targetType" = "partition" ]; then
    mv "$mntDir/boot" "$mntDir/_boot"
  fi
  umountPartitions

  # check if we us a separate boot device, in this case, copy first partition
  if [ -n "$bootDevice" ]; then
    copyBootPartition
    fixupPartitions
  elif [ $qemuMode -eq 1 -a $keepFiles -eq 0 ]; then
    fix4Qemu
  fi

  [ "$targetType" = "image" ] && setupLoop "cleanup"
  msg "info: finished"
}

# main program   -------------------------------------------------------------

[ "$1" != "-h" ] && checkPrereqs

setDefaults
parseArguments "$@"
main | tee -a "$logFile" >&2
